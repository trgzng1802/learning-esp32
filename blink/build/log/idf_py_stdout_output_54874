[1/16] Linking C static library esp-idf/espressif__led_strip/libespressif__led_strip.a
[2/16] Linking C static library esp-idf/mqtt/libmqtt.a
[3/16] Linking C static library esp-idf/input/libinput.a
[4/16] Linking C static library esp-idf/fatfs/libfatfs.a
[5/16] Linking C static library esp-idf/spiffs/libspiffs.a
[6/16] Linking C static library esp-idf/wifi_provisioning/libwifi_provisioning.a
[7/16] Performing build step for 'bootloader'
[1/1] cd /home/trngzng/esp32-training/blink/build/bootloader/esp-idf/esptool_py && /home/trngzng/.espressif/python_env/idf5.1_py3.10_env/bin/python /home/trngzng/esp/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 /home/trngzng/esp32-training/blink/build/bootloader/bootloader.bin
Bootloader binary size 0x6730 bytes. 0x8d0 bytes (8%) free.
[8/14] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/app_main.c.obj
[9/14] Linking C static library esp-idf/main/libmain.a
[10/14] Generating ld/sections.ld
[11/14] Building C object CMakeFiles/blink.elf.dir/project_elf_src_esp32.c.obj
[12/14] Linking CXX executable blink.elf
[13/14] Generating binary image from built executable
esptool.py v4.5.dev2
Creating esp32 image...
Merged 2 ELF sections
Successfully created esp32 image.
Generated /home/trngzng/esp32-training/blink/build/blink.bin
[14/14] cd /home/trngzng/esp32-training/blink/build/esp-idf/esptool_py && /home/trngzng/.espressif/python_env/idf5.1_py3.10_env/bin/python /home/trngzng/esp/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 partition --type app /home/trngzng/esp32-training/blink/build/partition_table/partition-table.bin /home/trngzng/esp32-training/blink/build/blink.bin
blink.bin binary size 0x2ba70 bytes. Smallest app partition is 0x100000 bytes. 0xd4590 bytes (83%) free.
